#include <math.h>
#define IRPin A0 //Connect w. analog pin
#define LED 13 //Sets LED pin
//Speed Definitions
#define Slow 1
#define Fast 2
//LED Definitions
#define LED1 2 // Green
#define LED2 4 // Blue
#define LED3 6 // Red

void setup() {
  Serial.begin(9600);
  pinMode(LED1, OUTPUT); //On for no object
  pinMode(LED2, OUTPUT); //On for an object
  pinMode(LED3, OUTPUT); //On after object
}

void loop() {
  float NewRead = ReadValue(); //Read from sensor
  float Distance = FindDistance(NewRead); //Find distance
  ObjectState(Distance);  //State Machine
}


float ObjectState(int Distance){
  static bool StartLED3 = false; //LED3
  static bool init = false;
  
  if(Distance <= 5 ||  Distance >= 80){ //Nothing Detected
      Serial.println("Nothing"); //Debug
    digitalWrite(LED1, HIGH);
    digitalWrite(LED2, LOW);
    
    if (StartLED3 == true){ //Start LED3 Display
        Serial.println("Start LED3 Display"); //Debug
      init = true; //Start Timer
      init = LED3Display(init);
    } 
    LED3Display(int);
  }

  else if (Distance >= 5 && Distance <= 80){ //Something Detected
      Serial.println("Object"); //Debug
    digitalWrite(LED1, LOW);
    digitalWrite(LED2, HIGH);
    digitalWrite(LED3, LOW);
    StartLED3 = true; //Primes LED3 Display
  }
}

int LED3Display(bool init){
  int Time = millis();
  static int Timeout = 0;
  
  if (init == true){ //Sets Timeout
      Serial.println("Set Timeout"); //Debug
    Timeout = Time + 2000;
    digitalWrite(LED3, HIGH);
    init = false;
  }
  else if (Time > Timeout && Timeout != 0) { //Turns off LED
      Serial.println("Turn off LED3"); //Debug
    digitalWrite(LED3, LOW);
    Timeout = 0;
  }
  else { //Debug
    Serial.print("Current Time: ");
    Serial.println(Time);
  }
  return init;
}


float ReadValue() {
  //Referenced from Wilhem's Practice Code
  int A2D = analogRead(IRPin);
  float SensorVolts = double(A2D);  //To double
  SensorVolts *= 5.0/1024;         // To Volts
  /*Serial.print("Read: ");
  Serial.println(SensorVolts);*/
  return SensorVolts;
}

float FindDistance(float ReadValue){
  float V;
  int Distance;
  V = ReadValue; //Sets Volts
  Distance = pow((V/14.475),(1/-0.8118)); //Sensor Calibration Curve
  /*Serial.print("Distance: ");
  Serial.println(Distance);*/
  return Distance;
}
